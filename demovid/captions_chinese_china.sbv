0:00:00.000,0:00:04.340
这个视频是基于“密钥重安装攻击：在 WPA2 中强制重用随机数“这篇论文

0:00:04.500,0:00:07.440
来展示我们在 WPA2 中发现的弱点

0:00:07.440,0:00:10.400
是如何被用于攻击 Android 和 Linux 设备的

0:00:10.540,0:00:13.980
首先，我会用一台 Android 设备来连接到我们的测试网络（名为 testnetwork）

0:00:14.020,0:00:16.080
这将在后面的展示中作为例子

0:00:16.260,0:00:19.020
注意到这个网络使用了 WPA2 加密

0:00:19.020,0:00:21.300
正如这个锁标所表示的

0:00:21.480,0:00:24.220
此外，在访问诸如 match.com 的网站时

0:00:24.220,0:00:27.620
Android 会使用 HTTPS 作为额外的安全保护

0:00:27.780,0:00:30.340
这可以由地址栏的 HTTPS 绿锁来表明

0:00:30.340,0:00:33.780
而且当你查看网页信息时，这也会被重点标注

0:00:33.780,0:00:40.640
换句话说，所有传输的信息都是受到 WPA2 和 HTTPS 双重保护的

0:00:41.320,0:00:45.140
让我们现在启动 Android 和 Linux 设备的攻击程序

0:00:45.660,0:00:49.300
首先，这行命令是用来启动 WPA2 攻击脚本的

0:00:49.380,0:00:52.960
注意到，我在启动脚本时声明了所攻击的加密 Wi-Fi 网络

0:00:53.160,0:00:55.680
而且只会针对某一个已连接的设备

0:00:56.020,0:00:59.760
这个工具首先会搜索将被攻击的加密 Wi-Fi 网络

0:01:00.340,0:01:02.560
接着，我们会将这个网络在不同的频段克隆一份

0:01:02.560,0:01:07.420
这份克隆的网络使得攻击者可以控制 Wi-Fi 握手包

0:01:07.420,0:01:10.460
这一点是利用我们所发现的弱点所必须的

0:01:11.000,0:01:15.460
接下来，受攻击者需要能够通过我们的克隆网络连接到互联网

0:01:15.760,0:01:19.100
然后，还要多做一步就是启动 sslstrip 工具

0:01:19.100,0:01:24.040
这个工具会尝试移除未正确配置的网站上的 HTTPS 保护

0:01:24.780,0:01:29.420
最后，我们会用到 Wireshark 来捕捉所有客户端所传输的信息

0:01:33.740,0:01:35.860
现在，你已经准备好进行攻击了

0:01:36.000,0:01:40.300
让我们回到被攻击的设备上，然后连接到这个 WPA2 保护的测试网络

0:01:40.700,0:01:42.295
当受害者启用 Wi-Fi 时

0:01:42.295,0:01:44.535
Android 系统会搜索之前连接过的测试网络

0:01:45.960,0:01:51.600
当它搜索到测试网络时，Android 会尝试连接到真实的测试网络，而这当然不是我们所期待的

0:01:51.900,0:01:58.020
幸运的是，我们只需要发送一些特殊的 Wi-Fi 数据帧，就可以让设备使用不同的频道

0:01:58.260,0:02:01.920
这会欺骗 Android 系统来连接我们设立的克隆网络

0:02:02.460,0:02:07.500
基本上，我们已经建立了一个受害者和真实的 Wi-Fi 网络之间的中间人身份

0:02:07.620,0:02:10.500
这使得我们可以有效地控制报文

0:02:10.500,0:02:13.900
并在四重握手时进行密钥重安装攻击

0:02:13.980,0:02:16.380
正常来说，当我们发动这样的攻击时

0:02:16.380,0:02:19.540
受害者会在加密数据帧时重用随机数

0:02:19.540,0:02:22.420
这使得我们可以恢复被加密的数据

0:02:22.500,0:02:24.780
然而，由于实现上的问题

0:02:24.780,0:02:28.105
Android 和 Linux 不会重安装实际的加密密钥

0:02:28.105,0:02:31.535
而是会重安装一个全为零的加密密钥

0:02:31.580,0:02:36.820
这使得我们可以监听并控制所有设备间传输的信息

0:02:37.760,0:02:42.940
我们此时回到 Wireshark，就会看到大量的数据包被截获

0:02:43.200,0:02:49.020
正常情况下，这些数据包应该被 WPA2 加密，攻击者无法看到明文数据

0:02:49.240,0:02:52.820
然而，在不知道受保护的 Wi-Fi 网络的密码的情况下

0:02:52.820,0:02:55.440
我们通过攻击可以看到所有受害者正在传输的明文数据包

0:02:55.460,0:02:59.740
这表明我们已经成功绕过了 WPA2 加密

0:03:00.620,0:03:04.000
现在让我们在受害者的 Android 设备上访问网站

0:03:04.065,0:03:06.855
为了方便演示，我们会再次访问 match.com

0:03:10.520,0:03:15.360
现在你可以看到，地址栏上不再有绿色的 HTTPS 锁标志

0:03:15.420,0:03:20.000
这意味着网站不再受到 HTTPS 的额外安全保护

0:03:20.460,0:03:24.260
要注意的是，你可以使用 sslstrip 来绕过 HTTPS 的保护

0:03:24.260,0:03:29.540
虽然这种绕过方式并不适用于已正确配置的 HTTPS 网站

0:03:29.545,0:03:32.020
仍然有很大部分的网站会受到攻击

0:03:32.500,0:03:37.120
很不幸的是，很多用户并不会意识到网站不再使用 HTTPS

0:03:37.120,0:03:41.180
因此继续使用自己的邮箱和密码登录

0:03:45.100,0:03:49.720
攻击者就可以看到受害者所使用的邮箱和密码

0:03:49.720,0:03:52.200
当然，这里只是一个使用虚假账户的演示

0:03:52.200,0:03:54.040
所以登录会失败

0:03:54.320,0:03:58.100
但没关系，现在攻击者可以看到我们所尝试的密码

0:03:58.100,0:04:01.040
让我们回到攻击者那边，搜索刚刚的登录尝试

0:04:07.220,0:04:12.620
我们可以看到，攻击者真的可以看到受害者所使用的用户名和密码

0:04:13.600,0:04:19.400
要避免受到这样的 WPA2 攻击，你必须更新所有使用 Wi-Fi 的设备

